@page "/"
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>TemuLinks - Home</PageTitle>

@if (AuthService.IsAuthenticated)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-8">
                <h1>Willkommen bei TemuLinks!</h1>
                <p class="lead">Hallo @AuthService.Username!</p>
                <p>Hier kannst du deine Temu-Links verwalten und organisieren.</p>
                
                <div class="row mt-4">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Meine Links</h5>
                                <p class="card-text">Verwalte deine gespeicherten Temu-Links</p>
                                <button class="btn btn-primary" disabled>Bald verfügbar</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Browser-Plugin</h5>
                                <p class="card-text">Installiere das Chrome-Plugin für einfaches Speichern</p>
                                <button class="btn btn-secondary" disabled>Bald verfügbar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="text-center mb-0">TemuLinks Login</h3>
                        </div>
                        <div class="card-body">
                            <div>
                                <div class="mb-3">
                                    <label for="username" class="form-label">Benutzername</label>
                                    <input id="username" type="text" class="form-control" name="username" 
                                           @oninput="OnUsernameChange" />
                                </div>
                                
                                <div class="mb-3">
                                    <label for="password" class="form-label">Passwort</label>
                                    <input id="password" type="password" class="form-control" name="password" 
                                           @oninput="OnPasswordChange" />
                                </div>
                                
                                <div class="mb-3 form-check">
                                    <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginModel.RememberMe" />
                                    <label class="form-check-label" for="rememberMe">
                                        Angemeldet bleiben
                                    </label>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="alert alert-danger" role="alert">
                                        @errorMessage
                                    </div>
                                }
                                
                                <div class="d-grid">
                                    <button type="button" class="btn btn-primary" @onclick="HandleLogin" disabled="@isLoading">
                                        @if (isLoading)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        }
                                        Anmelden
                                    </button>
                                </div>
                                
                                <div class="mt-2">
                                    <small class="text-muted">
                                        Debug: Username='@loginModel.Username', Password='@loginModel.Password'
                                    </small>
                                </div>
                            </div>
                            
                            <div class="mt-3 text-center">
                                <small class="text-muted">
                                    Demo: admin / admin
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
}

@code {
    private LoginModel loginModel = new() { Username = "", Password = "" };
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private void OnUsernameChange(ChangeEventArgs e)
    {
        loginModel.Username = e.Value?.ToString() ?? "";
        Console.WriteLine($"Username changed: '{loginModel.Username}'");
        StateHasChanged();
    }

    private void OnPasswordChange(ChangeEventArgs e)
    {
        loginModel.Password = e.Value?.ToString() ?? "";
        Console.WriteLine($"Password changed: '{loginModel.Password}'");
        StateHasChanged();
    }

    private async Task HandleLogin()
    {
        Console.WriteLine("=== HandleLogin START ===");
        Console.WriteLine($"Button clicked! isLoading: {isLoading}");
        Console.WriteLine($"Before: Username='{loginModel.Username}', Password='{loginModel.Password}'");
        
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged(); // Force UI update
        
        Console.WriteLine($"After StateHasChanged: Username='{loginModel.Username}', Password='{loginModel.Password}'");
        
        try
        {
            Console.WriteLine($"Calling AuthService.LoginAsync...");
            var success = await AuthService.LoginAsync(loginModel);
            Console.WriteLine($"AuthService returned: {success}");
            
            if (success)
            {
                Console.WriteLine("Login successful, navigating...");
                Navigation.NavigateTo("/", true);
            }
            else
            {
                Console.WriteLine("Login failed - invalid credentials");
                errorMessage = "Ungültige Anmeldedaten. Bitte versuchen Sie es erneut.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = "Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.";
        }
        finally
        {
            isLoading = false;
            Console.WriteLine("=== HandleLogin END ===");
        }
    }
}
