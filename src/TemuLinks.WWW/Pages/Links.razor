@page "/meine-links"
@inject TemuLinks.WWW.Services.ITemuLinksApiClient Api
@inject IJSRuntime JS

<PageTitle>Meine Links</PageTitle>

<div class="container-fluid mt-4">
    <h3>Meine Links</h3>

    <div class="mb-3 d-flex align-items-center gap-2">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="LoadCount">Anzahl laden</MudButton>
        @if (linkCount.HasValue)
        {
            <MudChip Color="Color.Secondary" Variant="Variant.Filled">@linkCount.Value Links</MudChip>
        }
    </div>
    <hr />

    @if (links == null)
    {
        <div>Noch keine Daten. Klicke auf "Anzahl laden".</div>
    }
    else
    {
        <MudTable Items="@links" Dense="true" Hover="true" Striped="true">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Datum</MudTh>
                <MudTh>Vorname</MudTh>
                <MudTh></MudTh>
                <MudTh>Beschreibung</MudTh>
                <MudTh>Öffentlich</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="() => ConfirmDelete(context)" />
                </MudTd>
                <MudTd>
                    <div>@context.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy")</div>
                    <div class="text-muted" style="font-size:0.9em;">@context.CreatedAt.ToLocalTime().ToString("HH:mm")</div>
                </MudTd>
                <MudTd>@(GetFirstName(context.UserName))</MudTd>
                <MudTd>
                    <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" Href="@context.Url" Target="_blank" />
                </MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>
                    <MudSwitch TValue="bool" Checked="@context.IsPublic"
                               CheckedChanged="@(async (bool val) => { context.IsPublic = val; await TogglePublic(context); })"
                               Color="Color.Primary" Immediate="true" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</div>

@code {
    private List<TemuLinks.WWW.Models.TemuLinkDto>? links;
    private int? linkCount;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadInitialWithRetry();
        }
    }

    private async Task LoadCount()
    {
        linkCount = await Api.GetLinkCountAsync();
        links = await Api.GetLinksAsync();
    }

    private async Task LoadInitialWithRetry()
    {
        const int maxAttempts = 5;
        for (var attempt = 1; attempt <= maxAttempts; attempt++)
        {
            await LoadCount();
            if (links != null)
            {
                break;
            }
            await Task.Delay(200);
        }
        await InvokeAsync(StateHasChanged);
    }

    // Manuelle Link-Erfassung entfernt

    private async Task ConfirmDelete(TemuLinks.WWW.Models.TemuLinkDto l)
    {
        var really = await JS.InvokeAsync<bool>("confirm", $"Link wirklich löschen?\n{l.Description}");
        if (!really) return;
        var ok = await Api.DeleteLinkAsync(l.Id);
        if (ok)
        {
            await LoadCount();
        }
    }

    private async Task TogglePublic(TemuLinks.WWW.Models.TemuLinkDto l)
    {
        var dto = new TemuLinks.WWW.Models.UpdateTemuLinkDto
        {
            Description = l.Description,
            IsPublic = l.IsPublic
        };
        var updated = await Api.UpdateLinkAsync(l.Id, dto);
        if (updated == null)
        {
            // revert on failure
            l.IsPublic = !l.IsPublic;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetFirstName(string? userName)
    {
        if (string.IsNullOrWhiteSpace(userName)) return string.Empty;
        var parts = userName.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length > 0 ? parts[0] : userName.Trim();
    }
}


